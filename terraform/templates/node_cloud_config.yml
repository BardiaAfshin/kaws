#cloud-config

coreos:
  locksmith:
    etcd_endpoints: https://10.0.1.4:2380,https://10.0.1.5:2380,https://10.0.1.6:2380
    etcd_cafile: /etc/etcd2/ssl/etcd-ca.pem
    etcd_certfile: /etc/etcd2/ssl/etcd-client.pem
    etcd_keyfile: /etc/etcd2/ssl/etcd-client-key.pem
  update:
    reboot_strategy: etcd-lock
  flannel:
    etcd_endpoints: https://10.0.1.4:2380,https://10.0.1.5:2380,https://10.0.1.6:2380
    etcd_cafile: /etc/etcd2/ssl/etcd-ca.pem
    etcd_certfile: /etc/etcd2/ssl/etcd-client.pem
    etcd_keyfile: /etc/etcd2/ssl/etcd-client-key.pem
    interface: $private_ipv4
  units:
    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            AFter=flanneld.service
        - name: 50-opts.conf
          content: |
            [Service]
            Environment=DOCKER_OPTS='--log-driver=journald'
    - name: flanneld.service
      command: start
    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        [Service]
        Environment=KUBELET_VERSION=v${version}
        Environment=KUBELET_ACI=docker://gcr.io/google_containers/hyperkube
        Environment="RKT_OPTS=--volume resolv,kind=host,source=/etc/resolv.conf --mount volume=resolv,target=/etc/resolv.conf --insecure-options=image"
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --allow-privileged=true \
          --api-servers=https://${master_ip}:443 \
          --cloud-provider=aws \
          --cluster-dns=10.3.0.10 \
          --cluster-domain=cluster.local \
          --hostname-override=$private_ipv4 \
          --kubeconfig=/etc/kubernetes/node-kubeconfig.yml \
          --logtostderr=true \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --tls-cert-file=/etc/kubernetes/ssl/node.pem \
          --tls-private-key-file=/etc/kubernetes/ssl/node-key.pem
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
ssh_authorized_keys: [${ssh_public_keys}]
write_files:
  - path: /etc/kubernetes/manifests/kube-proxy.yml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
          - name: kube-proxy
            image: gcr.io/google_containers/hyperkube:v${version}
            command:
              - /hyperkube
              - proxy
              - --healthz-bind-address=0.0.0.0
              - --kubeconfig=/etc/kubernetes/node-kubeconfig.yml
              - --master=https://${master_ip}:443
              - --proxy-mode=iptables
            securityContext:
              privileged: true
            volumeMounts:
              - mountPath: /etc/ssl/certs
                name: ssl-certs
              - mountPath: /etc/kubernetes/node-kubeconfig.yml
                name: kubeconfig
                readOnly: true
              - mountPath: /etc/kubernetes/ssl
                name: etc-kube-ssl
                readOnly: true
        volumes:
          - name: ssl-certs
            hostPath:
              path: /usr/share/ca-certificates
          - name: kubeconfig
            hostPath:
              path: /etc/kubernetes/node-kubeconfig.yml
          - name: etc-kube-ssl
            hostPath:
              path: /etc/kubernetes/ssl
  - path: /etc/kubernetes/node-kubeconfig.yml
    content: |
      apiVersion: v1
      kind: Config
      clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/ssl/ca.pem
      contexts:
        - context:
            cluster: local
            user: node
          name: node-context
      current-context: node-context
      users:
        - name: node
          user:
            client-certificate: /etc/kubernetes/ssl/node.pem
            client-key: /etc/kubernetes/ssl/node-key.pem
  - path: /opt/kaws/decrypt-pki
    content: |
      #!/bin/bash -e
      for file in $(find /etc/etcd2/ssl/*.base64 /etc/kubernetes/ssl/*.base64); do
        rkt run \
          --insecure-options image \
          --volumes etc-etcd2-ssl,kind=host,source=/etc/etcd2/ssl \
          --mount volume=etcd-etcd2-ssl,target=/etc/etcd2/ssl \
          --stage1-from-dir stage1-fly.aci \
          docker://quay.io/coreos/awscli \
          -- \
          aws --region $${region} kms decrypt --ciphertext-blob fileb://$file --output text --query Plaintext | base64 --decode > $${file/-encrypted.base64/.pem}
      done
  - path: /etc/etcd2/ssl/etcd-ca.pem
    content: ${etcd_ca_cert}
  - path: /etc/etcd2/ssl/etcd-client.pem
    content: ${etcd_client_cert}
  - path: /etc/etcd2/ssl/etcd-client-key-encrypted.base64
    content: ${etcd_client_key}
  - path: /etc/kubernetes/ssl/ca.pem
    content: ${k8s_ca_cert}
  - path: /etc/kubernetes/ssl/node.pem
    content: ${k8s_node_cert}
  - path: /etc/kubernetes/ssl/node-key.pem
    content: ${k8s_node_key}
